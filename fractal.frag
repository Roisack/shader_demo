varying vec2 textureCoord;
uniform float time;

int max_iterations = 49;
vec2 focus_point;
vec2 range;

in vec2 text_coord;

uniform vec3 palette[50] = vec3[50](
vec3(0.028470213827, 0.700871825193, 0.373842716438),
vec3(0.25781986379, 0.843539345251, 0.25806986275),
vec3(0.0268698730174, 0.270360318745, 0.921558070331),
vec3(0.751020683934, 0.940100967119, 0.819421045718),
vec3(0.320374807519, 0.372217345811, 0.561474551273),
vec3(0.984116265987, 0.908999899822, 0.605126436014),
vec3(0.0971716029639, 0.189787860663, 0.479271127588),
vec3(0.199270964227, 0.869880824376, 0.0605038246018),
vec3(0.440147724329, 0.336201796237, 0.41769353433),
vec3(0.243318226203, 0.895156374732, 0.976103363327),
vec3(0.400572529081, 0.946813939995, 0.0362735329735),
vec3(0.786783436954, 0.481487681391, 0.108520549608),
vec3(0.0711373460664, 0.035065694629, 0.221564789352),
vec3(0.0781365154021, 0.380018374525, 0.0278012580882),
vec3(0.859108181155, 0.204522285045, 0.27042434477),
vec3(0.136338151752, 0.117852819772, 0.273795107445),
vec3(0.612616266472, 0.778900689644, 0.153401166004),
vec3(0.693201636381, 0.283481367598, 0.0387612393681),
vec3(0.0418087882065, 0.183675130878, 0.323487862031),
vec3(0.88094306424, 0.764172839654, 0.280372847984),
vec3(0.670554713172, 0.21205131577, 0.844783791879),
vec3(0.685111062672, 0.0631861456993, 0.889700718659),
vec3(0.945885940665, 0.0317556742197, 0.983520242102),
vec3(0.828672139561, 0.265418158429, 0.25621739025),
vec3(0.958875084837, 0.0987317714899, 0.132424421099),
vec3(0.295803920499, 0.777018192448, 0.894947277887),
vec3(0.199866360849, 0.0395763812078, 0.423773808842),
vec3(0.742071307546, 0.0583003231192, 0.453240173081),
vec3(0.0891374530739, 0.0358279051184, 0.174790855039),
vec3(0.77343090526, 0.647629936253, 0.55847191646),
vec3(0.281274187933, 0.136438260121, 0.108406005283),
vec3(0.0355445310404, 0.364784956972, 0.769574716101),
vec3(0.206478444965, 0.8641704164, 0.381627653007),
vec3(0.913492684937, 0.562395276536, 0.391544313316),
vec3(0.882272940891, 0.924064342991, 0.495201136461),
vec3(0.930004535096, 0.507273794066, 0.516296213853),
vec3(0.933230520381, 0.291044818375, 0.031559527679),
vec3(0.913601525408, 0.621304547901, 0.679140862106),
vec3(0.0473953048355, 0.471569100693, 0.427221944501),
vec3(0.256192763246, 0.284165589785, 0.321952247559),
vec3(0.648370240743, 0.38137112609, 0.215704074356),
vec3(0.369031256951, 0.298119833207, 0.479179151297),
vec3(0.72936283912, 0.309010818701, 0.193654715957),
vec3(0.94617674099, 0.419357408881, 0.458991486618),
vec3(0.982330123019, 0.104930251514, 0.991554226457),
vec3(0.440701711792, 0.630515774638, 0.94787230384),
vec3(0.871152666714, 0.109024298112, 0.30258618901),
vec3(0.742099361991, 0.27482056826, 0.036246030436),
vec3(0.0413572191549, 0.804156502786, 0.569515150646),
vec3(0.802392679065, 0.0767271789245, 0.410990699774)
);

// Values that stay constant for the whole mesh.
uniform sampler2D texture_sampler;

float lerp(float x0, float x1, float alpha)
{
    return x0 * (1.0 - alpha) + alpha * x1;
}

int man_equation(vec2 z, vec2 c)
{
    int n = 0;
    vec2 old_z;
    vec2 z_squared;
    
    while (n < max_iterations)
    {
        if (n >= max_iterations)
            return max_iterations;
        
        old_z = z;
        
        z_squared.x = z.x*z.x - z.y*z.y;
        z_squared.y = 2*z.x*z.y;
        
        z.x = z_squared.x + c.x;
        z.y = z_squared.y + c.y;
        
        // If this complex number keeps getting the same values over and over again
        if (old_z.x == z.x && old_z.y == z.y)
            return max_iterations;
        
        // If this complex number has escaped this iteration
        if ( (z.x*z.x) + (z.y*z.y) > 4.0)
            return n;
        
        n = n + 1;
    }
    return 0;
}

vec3 man_color(vec2 c)
{
    vec2 empty1 = vec2(0.0,0.0);
    int iterations = man_equation(empty1, c);
    
    vec3 col = palette[iterations];
    
    if (iterations >= max_iterations)
    {
        col.r = 255;
        col.g = 255;
        col.b = 255;
    }
    return col;
}

void main()
{
    float i = textureCoord.s;
    float j = textureCoord.t;
    vec4 col;
    
	// Output color = color of the texture at the specified UV
    vec2 complex_number;
    
    float zoom_level = 10 / (pow(time, time));
    focus_point.x = 0.3;
    focus_point.y = 0.018805001;
    range.x = 5.0 * zoom_level;
    range.y = 5.0 * zoom_level;
    
    complex_number.x = focus_point.x + lerp(-range.x, range.x, i);
    complex_number.y = focus_point.y + lerp(-range.y, range.y, j);
    
    vec3 col2 = man_color(complex_number);
    col.r = col2.r;
    col.g = col2.g;
    col.b = col2.b;
    gl_FragColor = col;
}
